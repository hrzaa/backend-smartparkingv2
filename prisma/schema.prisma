generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  username  String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  token     String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  role      String   @default("ADMIN")
  updatedAt DateTime @updatedAt
  userId    String   @id @default(uuid())

  @@map("users")
}

model Parking {
  code         String       @db.VarChar(12)
  status       String       @db.VarChar(10)
  parkingin    DateTime     @default(now())
  parkingout   DateTime?
  totaltime    Int?
  parkingId    String       @id @default(uuid())
  transactions Transaction?

  @@map("parkings")
}

model Transaction {
  transactionId     String  @id @db.VarChar(100)
  parkingId         String  @unique
  totalprice        Float
  transactionstatus transactions_status
  snap_token         String?             @db.VarChar(255)
  snap_redirect_url  String?             @db.VarChar(255)
  payment_method     String?             @db.VarChar(110)
  created_at         DateTime?           @default(now()) @db.Timestamp(0)
  updated_at         DateTime?           @default(now()) @db.Timestamp(0)
  idParking         Parking @relation(fields: [parkingId], references: [parkingId], onDelete: Cascade)

  @@map("transactions")
}

model Price {
  priceId   String   @id @default(uuid())
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prices")
}

model MainArea {
  id        String   @id @default(uuid())
  name      String   @unique
  areas     Area[] // Relasi one-to-many dari MainArea ke Area
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("main_areas")
}

model Area {
  id         String    @id @default(uuid())
  mainArea   MainArea? @relation(fields: [mainAreaId], references: [id]) // Relasi many-to-one dari Area ke MainArea
  mainAreaId String
  name       String    @unique
  status     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("areas")
}

model Gates {
  gatesId    String  @id @default(uuid())
  gatesName  String  @unique
  gateStatus Boolean @default(false)

  @@map("gates")
}

enum transactions_status {
  PENDING_PAYMENT
  PAID
  CANCELED
}
